#!/usr/bin/env python3
import sys, os, argparse

parser = argparse.ArgumentParser(description='-d script DIR -t testMode -n batchName')
parser.add_argument("-d", "--tdir",
                   required=True,
                   help="shell script dir",
                   dest="tdir")
parser.add_argument("-t", "--test",
                   help="test run submit only one job",
                   type=bool,
                   default=False,
                   dest="testRun")
parser.add_argument("-r", "--run",
                   help="run DAG",
                   default=False,
                   action="store_true",
                   dest="runDAG")
parser.add_argument("-n", "--name",
                   help="bach name",
                   default="",
                   dest="batchName")

args = parser.parse_args()

print ("target DIR: {}".format(args.tdir))
cmsswBase = os.environ['CMSSW_BASE']+"/src"
if not cmsswBase.startswith("/afs/cern.ch/work/"): 
  print ("please work on WORK area, i.g., /afs/cern.ch/work/")
  exit()
print ("CMSSW Base: {}".format(cmsswBase))
if args.batchName != "":
  batchName = "_"+args.batchName
  print ("batch name tag: ()".format(args.batchName))
else: batchName = ""
tdir = cmsswBase+"/"+args.tdir
if tdir.endswith("/"): tdir = tdir[:-1]
os.chdir(tdir)
#make local output dirs for logs and such
def make_if_not_exist(dir_name):
  if not os.path.exists(dir_name):
    os.mkdir(dir_name)
make_if_not_exist("output")
make_if_not_exist("error")
make_if_not_exist("log")

sList = [x for x in os.listdir(".") if x.startswith("gather") and x.endswith(".sh")]

cTmp = """executable              = {sh}
universe                = vanilla
requirements            = (OpSysAndVer =?= "CentOS7")
request_cpus            = {nCPU}
max_transfer_output_mb  = {memory}
+JobFlavour             = "tomorrow"
+AccountingGroup        = "group_u_CMS.u_zh.priority"
output                  = output/{shN}.out
error                   = error/{shN}.err
log                     = log/{shN}.log
queue
"""

# gather part
outGatherList = []
for x in sList:
  tmpJ = open(tdir+"/"+x.replace(".sh", ".sub"),'w')
  data = {'sh':x, 'shN':x.replace(".sh", ""), 'nCPU':1, 'memory':'4000'}
  tmpJ.write(cTmp.format(**data))
  tmpJ.close()

# hadd part
tmpHadd = open(tdir+"/hadd.sub",'w')
tmpHaddV = {'sh':'hadd.sh', 'shN':'hadd', 'nCPU':4, 'memory':'4000'}
tmpHadd.write(cTmp.format(**tmpHaddV))
tmpHadd.close()

# align part
tmpAlign = open(tdir+"/align.sub",'w')
tmpAlignV = {'sh':'align.sh', 'shN':'align', 'nCPU':4, 'memory':'4000'}
tmpAlign.write(cTmp.format(**tmpAlignV))
tmpAlign.close()

# validation part
tmpVal = open(tdir+"/validation.sub",'w')
tmpValV = {'sh':'validation.sh', 'shN':'validation', 'nCPU':4, 'memory':'4000'}
tmpVal.write(cTmp.format(**tmpValV))
tmpVal.close()

# submit gather
slog = open("condorSubmit.log","w")
slog.write("batch name: {}".format(args.batchName))
cList = [x.replace('.sub','') for x in os.listdir(".") if x.startswith("gather") and x.endswith(".sub")]

job_template          = "JOB {jn} {tdir}/{jn}.sub\n"
parent_child_template = "PARENT {} CHILD {}\n"

#make DAG to submit jobs in order
os.chdir('..')
dag_name = '{}.dag'.format(args.tdir)
with open(dag_name,'w') as f:
  #gather job dag lines
  gather_jobs_str = ""
  for i, gather_name in enumerate(cList):
    os.system("chmod +x {}/{}*".format(tdir,gather_name))
    dag_str = job_template.format(**{"jn":gather_name,"tdir":tdir})
    f.write(dag_str)
    gather_jobs_str += " {}".format(gather_name)
    if args.testRun: break

  # add jobs for hadd, align, validation
  dag_str = job_template.format(**{"jn":"hadd","tdir":tdir})
  f.write(dag_str)
  dag_str = job_template.format(**{"jn":"align","tdir":tdir})
  f.write(dag_str)
  dag_str = job_template.format(**{"jn":"validation","tdir":tdir})
  f.write(dag_str)

  #only run hadd, align after gather jobs finish
  job_str = parent_child_template.format(gather_jobs_str, "hadd")
  f.write(job_str)
  job_str = parent_child_template.format(gather_jobs_str, "align")
  f.write(job_str) 

  #only run validation after hadd, align finishes
  job_str = parent_child_template.format("hadd align", "validation")
  f.write(job_str)  

if args.runDAG: 
  os.system('condor_submit_dag {}'.format(dag_name))
  print('submitted dag')